import os

import argparse

from flask_script import Manager
from flask import Flask
from tabulate import tabulate

from keyczar import keyczar
from keyczar.errors import Base64DecodingError
import string
from rrg.employees import employees as sa_employees
from rrg.models import session_maker

parser = argparse.ArgumentParser(description='RRG Employees')


parser.add_argument(
    '--keyczardir', required=True,
    help='dir of encryption keys generated by keyczart',
    default='/.keyczar')

parser.add_argument('--db-user', required=True, help='database user',
                    default='marcdba')
parser.add_argument('--mysql-host', required=True,
                    help='database host - MYSQL_PORT_3306_TCP_ADDR',
                    default='marcdba')
parser.add_argument('--mysql-port', required=True,
                    help='database port - MYSQL_PORT_3306_TCP_PORT',
                    default=3306)
parser.add_argument('--db', required=True, help='d', default='rrg')
parser.add_argument('--db-pass', required=True, help='database pw',
                    default='deadbeef')

app = Flask(__name__, instance_relative_config=True)

# Load the default configuration
if os.environ.get('RRG_SETTINGS'):
    settings_file = os.environ.get('RRG_SETTINGS')
else:
    print('Environment Variable RRG_SETTINGS not set')
    quit(1)

if os.path.isfile(settings_file):
    try:
        app.config.from_envvar('RRG_SETTINGS')
    except Exception as e:
        print('something went wrong with config file %s' % settings_file)
        quit(1)
else:
    print('settings file %s does not exits' % settings_file)


def employees():
    args = parser.parse_args()

    session = session_maker(args)
    crypter = keyczar.Crypter.Read(args.keyczardir)
    printable = set(string.printable)
    w_employees = sa_employees(session)
    tbl = []
    i = 1
    for e in w_employees:
        try:
            ssn = crypter.Decrypt(e.ssn_crypto)
        except Base64DecodingError:
            ssn = None
        try:
            bankaccountnumber = crypter.Decrypt(e.bankaccountnumber_crypto)
        except Base64DecodingError:
            bankaccountnumber = None
        try:
            bankroutingnumber = crypter.Decrypt(e.bankroutingnumber_crypto)
        except Base64DecodingError:
            bankroutingnumber = None
        tbl.append(
            [i, e.id, filter(lambda x: x in printable, e.firstname + ' ' +
             e.lastname),
             filter(lambda x: x in printable, ssn) if ssn else None,
             bankaccountnumber,
             bankroutingnumber,
            ])
        i += 1
    print(
    tabulate(tbl, headers=['number', 'sqlid', 'employee', 'ssn', 'bankaccountnumber', 'bankroutingnumber']))
