import os
from subprocess import call
import random
import string
import argparse
from datetime import datetime as dt
from datetime import timedelta as td
from tabulate import tabulate
from keyczar import keyczar

import xml.etree.ElementTree as ET
import xml.dom.minidom as xml_pp

from rrg.reminders_generation import reminders as period_reminders
from rrg.reminders_generation import timecards_set
from rrg.employees import employees as sa_employees
from rrg.employees import picked_employee
from rrg.models import Employee
from rrg.models import session_maker

parser = argparse.ArgumentParser(description='RRG Edit Employee')
parser.add_argument(
    '--keyczardir', required=True,
    help='dir of encryption keys generated by keyczart',
    default='/.keyczar')

parser.add_argument('number', type=int, help='reminder number to forget')
parser.add_argument('--db-user', required=True, help='database user',
                    default='marcdba')
parser.add_argument('--mysql-host', required=True,
                    help='database host - MYSQL_PORT_3306_TCP_ADDR',
                    default='marcdba')
parser.add_argument('--mysql-port', required=True,
                    help='database port - MYSQL_PORT_3306_TCP_PORT',
                    default=3306)
parser.add_argument('--db', required=True, help='d', default='rrg')
parser.add_argument('--db-pass', required=True, help='database pw',
                    default='deadbeef')


def edit_employee():
    args = parser.parse_args()
    xml = None
    session = session_maker(args)
    crypter = keyczar.Crypter.Read(args.keyczardir)
    w_employees = sa_employees(session)
    if args.number in xrange(1, w_employees.count() + 1):
        employee = picked_employee(session, args)
        xml = xml_pp.parseString(ET.tostring(employee.to_xml(crypter)))
        temp_file = os.path.join(os.path.sep, 'tmp', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(40)))
        with open(temp_file, 'w+b') as f:
            f.write(xml.toprettyxml())
        call(["vi", temp_file])
        whole_emp_xml = Employee.from_xml(temp_file)
        print 'emp from xml'
        print ET.tostring(whole_emp_xml)
        print 'emp from xml end'
        employee.update_from_xml_doc(whole_emp_xml, crypter)
        ####
        print employee.firstname
        print employee.lastname
        print employee.ssn_crypto
        print crypter.Decrypt(employee.ssn_crypto)
        print employee.bankroutingnumber_crypto
        print crypter.Decrypt(employee.bankroutingnumber_crypto)

        session.commit()
    else:
        print('Employee number is not in range')
        quit()
